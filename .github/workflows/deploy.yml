# variaveis/secrets de repositório que devem ser criadas
# criar também dois environments no repositorio dev e prod
# - DEFAULT_AWS_REGION / região default que o openid connect vai assumir
# - TERRAFORM_BACKEND_BUCKET / nome do bucket s3 para armazenar o estado do terraform
# - TERRAFORM_BACKEND_REGION / região do bucket s3 do backend do terraform
# - AWS_ASSUME_ROLE_ARN / arn da role que o workflow vai assumir com openid connect
# - SAM_STACK_NAME / nome do stack do sam
# - SAM_S3_BUCKET / nome do bucket s3 para armazenar o artefato do sam
# - SAM_AWS_REGION / região do bucket s3 do sam

name: 'Deploy Workflow'

on:
  push:
    branches:
      - develop
      - main
    paths:
      # somente executa o workflow se houver alterações no diretórios listados
      # possivel usar o paths-ignore para ignorar diretórios
      - 'infra/**'
      - 'sam-app/**'
      - 'destroy/**'
permissions:
  id-token: write
  contents: read
env:
  # aqui vão as variaveis globais de ambiente do workflow.
  # variaveis de ambiente no terraform são definidas com o prefixo TF_VAR_ e são recuperadas
  # de acordo com o environment selecionado pelo job
  ENVIRONMENT: ${{ github.ref == 'refs/heads/develop' && 'dev' || 'prod' }}
  TF_VAR_project_name: ${{ github.event.repository.name }}

jobs:
  check_destroy:
    runs-on: ubuntu-latest
    outputs:
      destroy: ${{ steps.read-destroy-config.outputs.destroy }}   
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read destroy configuration
        id: read-destroy-config
        run: |
          DESTROY="$(jq -r ".$ENVIRONMENT" ./destroy/destroy_config.json)"
          echo $DESTROY
          echo "destroy=$(echo $DESTROY)" >> $GITHUB_OUTPUT

  destroy-infra:
    needs: check_destroy
    if: needs.check_destroy.outputs.destroy == 'true'
    environment: ${{ github.ref == 'refs/heads/develop' && 'dev' || 'prod' }}
    runs-on: ubuntu-latest   
    steps:
      - name: Checkout code
        uses: actions/checkout@v4      
    
      - name: Configure AWS credentials
        uses: ./.github/actions/configure-aws-credentials
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION_DEFAULT }}          
      
      - name: Install AWS SAM CLI
        uses: aws-actions/setup-sam@v2      
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Destroy Sam
        run: |
          cd sam-app
          sam delete \
          --stack-name ${{ secrets.SAM_STACK_NAME }} \
          --region ${{ secrets.SAM_AWS_REGION }} \
          --no-prompts             

      - name: Terraform Init
        run: |
          cd infra && terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_BACKEND_BUCKET }}" \
            -backend-config="key=${{ github.event.repository.name }}" \
            -backend-config="region=${{ secrets.TERRAFORM_BACKEND_REGION }}" \
            -backend-config="use_lockfile=true"                     
            
      - name: Terraform Destroy
        id: terraform-destroy
        run: cd infra &&
          terraform workspace select $ENVIRONMENT || terraform workspace new $ENVIRONMENT &&
          terraform destroy -var-file="./envs/$ENVIRONMENT/terraform.tfvars" -auto-approve

  terraform:
    # depende do job check_destroy
    needs: check_destroy
    # executa somente se o destroy for diferente de true
    if: needs.check_destroy.outputs.destroy != 'true'
    # dentro do repositorio foi criado 2 enviroments dev e prod. 
    # um para o branch develop e outro para a branch main.
    # cada environment do repositorio possui variaveis e secrets diferentes
    # assim é possivel recuperar envs e secrets de acordo com o ambiente de forma dinamica.
    # aqui é o enviroment é selecionado de acordo com a branch que disparou o workflow
    environment: ${{ github.ref == 'refs/heads/develop' && 'dev' || 'prod' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v4      
      
      - name: Configure AWS credentials
        uses: ./.github/actions/configure-aws-credentials
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION_DEFAULT }}    

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3


      - name: Terraform Init
        run: |
          cd infra && terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_BACKEND_BUCKET }}" \
            -backend-config="key=${{ github.event.repository.name }}" \
            -backend-config="region=${{ secrets.TERRAFORM_BACKEND_REGION }}" \
            -backend-config="use_lockfile=true"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: terraform-plan
        run: cd infra &&
          terraform workspace select $ENVIRONMENT || terraform workspace new $ENVIRONMENT &&
          terraform plan -var-file="./envs/$ENVIRONMENT/terraform.tfvars" -out="$ENVIRONMENT.plan"

      - name: Terraform Apply
        id: terraform-apply
        run: |
          cd infra
          terraform workspace select $ENVIRONMENT || terraform workspace new $ENVIRONMENT
          terraform apply "$ENVIRONMENT.plan"
          BUCKET_NAME=$(terraform output -raw s3_bucket_name)
          echo "## Nome do Bucket S3" >> $GITHUB_STEP_SUMMARY
          echo "``````" >> $GITHUB_STEP_SUMMARY
          echo "$BUCKET_NAME" >> $GITHUB_STEP_SUMMARY
          echo "``````" >> $GITHUB_STEP_SUMMARY

  aws-sam:
    runs-on: ubuntu-latest
    needs:
      - terraform
    environment: ${{ github.ref == 'refs/heads/develop' && 'dev' || 'prod' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4      

    - name: Configure AWS credentials
      uses: ./.github/actions/configure-aws-credentials
      with:
        role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_REGION_DEFAULT }}    

    - name: Setup python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13' 
    
    - name: Install AWS SAM CLI
      uses: aws-actions/setup-sam@v2

    - name: Build and Deploy API
      run: |
        cd sam-app
        sam build
        sam deploy \
        --stack-name ${{ secrets.SAM_STACK_NAME }} \
        --s3-bucket ${{ secrets.SAM_S3_BUCKET }} \
        --capabilities CAPABILITY_IAM \
        --region ${{ secrets.SAM_AWS_REGION }} \
        --no-confirm-changeset \
        --no-fail-on-empty-changeset         

    - name: Capture API URL and Update Summary
      run: |
        cd sam-app
        API_URL=$(sam list stack-outputs --stack-name ${{ secrets.SAM_STACK_NAME }} --output json | jq -r '.[] | select(.OutputKey=="HelloWorldApi") | .OutputValue')
        echo "## Hello World API URL" >> $GITHUB_STEP_SUMMARY
        echo "``````" >> $GITHUB_STEP_SUMMARY
        echo "$API_URL" >> $GITHUB_STEP_SUMMARY
        echo "``````" >> $GITHUB_STEP_SUMMARY        